{"version":3,"sources":["components/Card.js","dummy_data.js","components/Trivia.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onShowAnswerClick","setState","showAnswer","handleNextQuestion","count","state","style","width","top","marginLeft","className","src","waves","height","textAlign","this","question","color","href","onClick","answer","marginTop","icon","size","React","Component","data","Trivia","componentDidMount","card_data","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleNext","total_questions","reset","currentQuestion","currentAnswer","restartNewTrivia","totalQuestions","Header","Footer","onLinkedInClick","window","open","onGithubClick","Date","getFullYear","tag","floating","social","fab","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aec25516.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBIcon } from 'mdbreact';\n\n/*\nComponent that render the flash card component\n */\nclass Card extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      showAnswer: false,\n      count: 0\n    }\n  }\n  /*\n  Function that set state of showAnswe to true on button click\n   */\n  onShowAnswerClick = () => {\n    this.setState({\n      showAnswer: true\n    })\n  }\n\n  /*\n  Function that handles the fetching of the next question from the list of questions\n   */\n  handleNextQuestion = () => {\n    this.setState({\n      count: this.state.count + 1,\n      showAnswer: false\n    }, () => {\n      this.props.handleNextQuestion(this.state.count)\n    });\n  }\n\n  render(){\n    return (\n      <div>\n\n      <MDBCard style={{ width: \"22rem\", top:\"100px\", marginLeft:\"40%\" }}>\n        <MDBCardImage className=\"img-fluid\" src=\"https://mdbootstrap.com/img/Photos/Others/images/43.jpg\" waves />\n        <MDBCardBody style={{ height: \"150px\" }}>\n          <MDBCardTitle style={{ textAlign:'center'}}>{this.props.question}</MDBCardTitle>\n            {/*logic to hide button when answer is visible*/}\n            {!this.state.showAnswer && (<MDBBtn color=\"secondary\" href=\"#\" style={{ marginLeft:\"15%\"}} onClick={this.onShowAnswerClick}>Click to see answer</MDBBtn>)}\n            {this.state.showAnswer && (<MDBCardText style={{ textAlign:'center'}}>{this.props.answer}</MDBCardText>)}\n        </MDBCardBody>\n      </MDBCard>\n\n      {/*logic to display next button only when answer is visible*/}\n      {this.state.showAnswer && (<MDBIcon onClick={this.handleNextQuestion} style={{ marginLeft:\"55%\", marginTop:\"8%\"}} icon=\"arrow-right\" size=\"lg\"/>)}\n      </div>\n\n    )\n  }\n}\n\nCard.propTypes ={\n  imageSource: PropTypes.string,\n  question: PropTypes.string,\n  answer: PropTypes.string,\n  questionCount: PropTypes.func\n};\n\nexport default Card;\n","/*\nFile comtaining the dummy data to display on the web application\n */\n\nexport const data = [\n  {\n    question:\"AFFINITY SALES\",\n    answer:\"Selling insurance through groups such as professional and business associations\",\n  },\n  {\n    question:\"ADMITTED COMPANY\",\n    answer:\"An insurance company licensed and authorized to do business in a particular state\",\n  },\n  {\n    question:\"ACTUAL CASH VALUE\",\n    answer:\"A form of insurance that pays damages equal to the replacement value of damaged property minus depreciation\",\n  },\n  {\n    question:\"ALLIED LINES\",\n    answer:\"Property insurance that is usually bought in conjunction with fire insurance; it includes wind, water damage, and vandalism coverage.\",\n  },\n  {\n    question:\"ANNUITANT\",\n    answer:\"The person(s) who receives the income from an annuity contract. Usually the owner of the contract or his or her spouse\",\n  },\n  {\n    question:\"ANNUITIZATION\",\n    answer:\"The conversion of the account balance of a deferred annuity contract to income payments\",\n  },\n  {\n    question:\"ANNUITY BENEFICIARY\",\n    answer:\"In certain types of annuities, a person who receives annuity contract payments if the annuity owner or annuitant dies while payments are still due\",\n  },\n  {\n    question:\"ANNUITY ISSUER\",\n    answer:\"The insurance company that issues the annuity\",\n  },\n  {\n    question:\"ANNUITY PROSPECTUS\",\n    answer:\"Legal document providing detailed information about variable annuity contracts. Must be offered to each prospective buyer\",\n  },\n  {\n    question:\"APPRAISAL\",\n    answer:\"A survey to determine a propertyÃ­s insurable value, or the amount of a loss\",\n  }\n];\n","import React from 'react';\nimport { MDBBtn } from 'mdbreact';\nimport Card from './Card';\nimport {data} from './../dummy_data';\n\nexport default class Trivia extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      total_questions: data.length,\n      reset: false,\n      card_data: data\n    }\n  }\n  /*\n  Shuffle flashcard on mount everytime\n   */\n  componentDidMount = () => {\n    this.setState({\n      card_data: this.shuffle(data)\n    })\n  }\n\n  /*\n  Logic to shuffle the trivia questions on every new load of the trivia challenge\n   */\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n/*\n  Logic that keeps track of the count and fetches the next question as well as\n  the answer\n */\n  handleNext = (count) => {\n    //if count equals to total number of trivia questions, time to reset trivia\n    if (count === this.state.total_questions){\n      this.setState({\n        reset:true\n      })\n    } else {\n      this.setState({\n        currentQuestion: this.state.card_data[count].question,\n        currentAnswer: this.state.card_data[count].answer,\n      })\n    }\n  }\n  /*\n  Function that handles the logic to restart the trivia challenge once all\n  flashcards are visited.\n   */\n  restartNewTrivia = () => {\n    this.setState({\n      reset: false,\n      card_data: this.shuffle(this.state.card_data)\n    })\n  }\n\n  render(){\n    return (\n      <div>\n       {/* logic to hide the flash cards when all questions have been seen*/}\n        {!this.state.reset && (\n          <Card\n            question={this.state.currentQuestion ? this.state.currentQuestion : this.state.card_data[0].question}\n            answer={this.state.currentAnswer ? this.state.currentAnswer : this.state.card_data[0].answer}\n            handleNextQuestion={this.handleNext}\n            totalQuestions={this.state.total_questions}\n          />\n        )}\n        {/* logic to show the restart button only once all the questions have been displayed*/}\n        {(this.state.reset) && (\n          <MDBBtn onClick={this.restartNewTrivia} color=\"secondary\" href=\"#\" style={{ marginLeft:\"43%\", marginTop:\"8%\"}}>\n            Restart Trivia\n          </MDBBtn>\n        )}\n      </div>\n    )\n  }\n}\n","import React from \"react\";\n\n/*\nComponent that renders the header for the application\n */\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"fa fa-more\"></div>\n      <span>\n        Welcome to the Trivia !!\n      </span>\n    </div>\n  )\n}\n","import React from \"react\";\nimport { MDBIcon, MDBBtn } from 'mdbreact';\n\n/*\nComponent that renders the footer for the application\n */\n\nexport default class Footer extends React.Component {\n\n  onLinkedInClick = () => {\n    window.open(\"https://www.linkedin.com/in/shrutisatish/\", '_blank');\n  }\n\n  onGithubClick = () => {\n    window.open(\"https://github.com/shrutisatish\", '_blank');\n  }\n\n  render(){\n    return (\n      <div className=\"footer\">\n        <div className=\"fa fa-more\"></div>\n        <span>\n           {new Date().getFullYear()}: Shruti Satish\n        </span>\n        <MDBBtn onClick={this.onLinkedInClick} size=\"lg\" tag=\"a\" floating social=\"li\">\n          <MDBIcon fab icon=\"linkedin-in\" />\n        </MDBBtn>\n        <MDBBtn onClick={this.onGithubClick} size=\"lg\" tag=\"a\" floating social=\"git\">\n          <MDBIcon fab icon=\"github\" />\n        </MDBBtn>\n      </div>\n    )\n\n  }\n\n}\n","import React from 'react';\nimport Trivia from './components/Trivia';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n/*\nMain component that renders the trivia challenge\n */\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n        <Trivia/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}